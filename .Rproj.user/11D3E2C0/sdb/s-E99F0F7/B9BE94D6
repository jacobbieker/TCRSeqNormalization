{
    "contents" : "\n# Designed and developed by Patrick Leyshock (leyshock@ohsu.edu) And Jacob Bieker (jacob@bieker.us)\n\n# Script consolidates multiple .xls files (generated by Aperio image-analysis software) into one .xlsx workbook\n#   Input to script is multiple .xls files.  There is one .xls file per slide, with one or more rows, each row\n#     corresponding to a region selected in the image\n#   Output is a single .xlsx worksheet\n#\n# Assumptions:\n#   1.  script is located in same directory as input files\n#   2.  directory containing input files contains only this script, the master.xlsx file\n#       plus .xls files to be consolidated\n#   3.  Master file has the groups of the mice in numerical order\n#   4.  input .xls files follow this naming convention:\n#\n#             mouse_NN_slide_MM_stain_MM.xls\n#\n#       so for mouse 3, slide 2, stain 5, the file name should be:\n#\n#             mouse_3_slide_2_stain_5.xls\n#\n#       Note that the delimitator between each component of the file name can be \n#       any of the following: \"_\"\n\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#   Configuration\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n# Uncomment below if the JVM is running out of heap space\n# Default should be fine for most data sets, tested on > 6000 files w/o \n# using this option\n# options(java.parameters = \"-Xmx1024m\")\n\n# Check if libraries are installed, if not, install them\nif(require(\"XLConnect\") & require(\"yaml\")){\n  print(\"XLConnect, yaml are loaded correctly\")\n} else {\n  print(\"trying to install XLConnect, yaml\")\n  install.packages(\"XLConnect\")\n  install.packages(\"yaml\")\n  if(require(\"XLConnect\") & require(\"yaml\")){\n    print(\"XLConnect, yaml are installed and loaded\")\n  } else {\n    stop(\"could not install XLConnect, yaml\")\n  }\n}\n\n#loads column names from config file config.yml\npredefined.column.headers <- yaml.load_file(\"config.yml\");\n\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#   Utility functions\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n\n#   utility functions for mouse_MM_slide_NN_stain_NN.xls\nget.mouse.id <- function(file.name) {\n  #   remove file extension\n  file.name <- strsplit(file.name, \"\\\\.\")[[1]][1];\n  #   extract mouse number\n  mouse.id <- strsplit(file.name, \"_\")[[1]][2];\n  return(mouse.id);\n}   #   get.mouse.id()\n\nget.slide.num <- function(file.name)   {\n  #   remove file extension\n  file.name <- strsplit(file.name, \"\\\\.\")[[1]][1];\n  #   extract mouse number\n  slide.num <- strsplit(file.name, \"_\")[[1]][4];    \n  return(slide.num);    \n}   #   get.slide.num()\n\nget.stain.name <- function(file.name)   {\n  #   remove file extension\n  file.name <- strsplit(file.name, \"\\\\.\")[[1]][1];\n  #   extract stain number\n  stain.name <- strsplit(file.name, \"_\")[[1]][6];\n  #Checks if stain name does not exist, because the output will be messed up if so\n  if (is.na(stain.name)) {\n    noStainError <- paste0(\"Warning: File \", file.name, \" does not conform to the naming convention\n                           , please rename file and rerun script\")\n    stop(noStainError)\n  }\n  return(stain.name);\n}   #   get.stain.name()\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#   Setup\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n\n#Remove older consolidated_files file\nfn <- \"consolidated_files.xlsx\";\nif(file.exists(fn))\n  file.remove(fn);\n\n#   identify all .xls files in the directory \nfiles <- list.files(getwd(), pattern = \".xls$\");\n\n# remove master file with groups from list of files vector\nfiles <- setdiff(files, \"master.xls\");\n\n#   load master workbook so that know which groups Mice are in\nmasterwkbk <- loadWorkbook(\"master.xlsx\", create = FALSE)\n\n#   create list to hold output data.frames\noutput <- list();\n#   create vector for storing the different stain numbers so that diff sheets created\nstain.names <- c();\n#   create workbook to save the data to\nworkbook <- loadWorkbook(\"consolidated_files.xlsx\", create = TRUE);\n#   create vector to store the different mice id for use in the summary\nmouse.ids <- c();\n\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#  Get data from master file\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#   read in file content\nmaster.workbook <- loadWorkbook(\"master.xlsx\")\nmaster.content <- readWorksheet(master.workbook, sheet = 1)\n# Get vector of genotypes in numerical order to apply later\nmaster.genotype <- master.content$Genotype\n\n\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#   Read workbook contents into R\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n\n#   for all files in the directory\nfor(i in 1:length(files))   {\n  \n  #   get current file name\n  file.name <- files[i];\n  \n  #   read in file content\n  file.workbook <- loadWorkbook(file.name);\n  file.content <- readWorksheet(file.workbook, sheet = 1);\n  \n  #   extract column headings, for output (and possibly QC), for the first file only\n  if(i == 1)\n    column.headings <- colnames(file.content);\n  \n  #   extract relevant metadata from file name\n  mouse.idnum <- get.mouse.id(file.name);\n  slide.number <- get.slide.num(file.name);\n  stain.number <- get.stain.name(file.name);\n  #Convert to numeric right after getting number\n  mouse.idnum <- as.numeric(mouse.idnum)\n  slide.number <- as.numeric(slide.number)\n  mouse.group <-  master.genotype[as.numeric(mouse.idnum)]\n  #Adds stain number to stain.names if it does not already exist in the vector\n  if(!stain.number %in% stain.names) {\n    stain.names <- c(stain.names, stain.number);\n    #  Create a sheet in the master workbook for each stain\n    createSheet(workbook, name = stain.number);\n  }\n  \n  #Adds stain number to stain.names if it does not already exist in the vector\n  if(!mouse.idnum %in% mouse.ids) {\n    mouse.ids <- c(mouse.ids, mouse.idnum);\n  }\n  \n  #   prepend metadata to file content\n  file.content <- cbind(mouse.group, stain.number,mouse.idnum, slide.number, file.content);\n  \n  #   append file content to output data.frame\n  output <- rbind(output, file.content);\n  \n  \n}   #   for i\n\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#   Export results\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n\n\n#Assign the column names to the data.frame\ncolnames(output) <- predefined.column.headers;\n\n#Subset output so that Stain Num are not converted and stay strings\n#Then add back in to data.frame \nfactor_to_numbers <- output\nfactor_to_numbers$'Stain' <- NULL\nfactor_to_numbers$'Group' <- NULL\n\n#   convert factors to numbers\n#       Not elegant, but needed so that the first three columns are converted\n#       to their numeric values and not factor level values\nfactor_to_numbers<- sapply(factor_to_numbers, function(x) if(is.factor(x)) {\n  as.numeric(as.character(x));\n} else {\n  as.numeric(x);\n})\n\nfactor_to_numbers <- data.frame(factor_to_numbers)\n#Reassign stain back to the temp data.frame\nfactor_to_numbers$'Stain' <- output$'Stain'\nfactor_to_numbers$'Group' <- output$'Group'\n#Output is then given the modified data.frame for use in the rest of the script\noutput <- factor_to_numbers\n#Reorder so that Stain and Group are the first two columns, like it was originally\noutput <- output[c(length(output), length(output) - 1, seq(1, length(output) - 2, by = 1))]\n\n#Reassign column names lost in above step\ncolnames(output) <- predefined.column.headers;\n\n#Convert to numeric\nmouse.ids <- as.numeric(mouse.ids);\n\n#Order the output by the Group\noutput <- output[with(output, order(Group)),]\n\n#  get the current sheets in the master workbook, which is in the same order\n#  as stain.number\ncurrentSheets <- getSheets(workbook);\n\nfor(i in 1:length(currentSheets)) {\n  # Selects the subset of the output that has the same stain number\n  output.subset <- output[output[,2]==stain.names[i],]\n  #Drops the Stain number from the data.frame before writing it\n  output.subset[,2] <- NULL\n  #Get rid of stain number on columns, since that is stored in sheet name\n  writeWorksheet(workbook, output.subset, sheet = currentSheets[i], 1, 1, header = TRUE)\n}\n\n#saves and actually writes the data to an Excel file\nsaveWorkbook(workbook);\n\n\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#   Summary of Data\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n\n\n#Create the sheet for the summary\ncreateSheet(workbook, name = \"summary\");\n\n#Write the data of the summary run in the top left corner\nwriteWorksheet(workbook, date(), sheet = \"summary\", header = FALSE);\n\n#create summary data.frame to put all the summary info into\nmouse.summary.output <- data.frame();\n\n#subset data for each mouse and perform calulations on it\nfor(i in 1:length(mouse.ids)) {\n  #vector to store the data before putting into summary output\n  current.summary <- NULL;\n  #Add the mouse ID to the current.summary\n  current.summary <- c(current.summary, mouse.ids[i])\n  for(j in 1:length(stain.names)) {\n    #subset output for current mouse and stain numbers\n    mouse.data.current <- subset(output, output[,3]==mouse.ids[i] & output[,2]==stain.names[j])\n    #Perform the calculations\n    #   Averaging to get the number of cells per mm per stain and mouse\n    average.size <- mean(mouse.data.current[,26]);\n    #   First 3+ 2+ and 1+ average\n    average.cells321 <- mean(mouse.data.current[,17]+mouse.data.current[,18]+mouse.data.current[,19]);\n    average.321cellpermm <- average.cells321/average.size;\n    #   Then 3+ 2+ average\n    average.cells32 <- mean(mouse.data.current[,17]+mouse.data.current[,18]);\n    average.32cellpermm <- average.cells32/average.size;\n    #   Last 3+ average\n    average.cells3 <- mean(mouse.data.current[,17]);\n    average.3cellpermm <- average.cells3/average.size;\n    #Append average cell to current summary\n    current.summary <- c(current.summary, average.321cellpermm, average.32cellpermm, average.3cellpermm);\n  }\n  #End of inside for loop\n  #save the current.summary to overall summary\n  mouse.summary.output <- rbind(mouse.summary.output, current.summary)\n}\n\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n#   Formatting Excel Document\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------\n\n#  Create CellStyles to use later\naverage.header <- createCellStyle(workbook, name = \"AvgHeader\")\n\n#Set foreground color for average.header\nsetFillPattern(average.header, XLC$FILL.SOLID_FOREGROUND)\nsetFillForegroundColor(average.header, XLC$COLOR.TURQUOISE)\n#setBorder(average.header, side = \"all\", XLC$BORDER.MEDIUM, color = XLC$COLOR.BLACK)\n\n#    Create header for above the stain numbers\n#have reference to get correct number of columns\nreference <- paste0(\"C3:\", LETTERS[(3 * length(stain.names))+2], \"3\")\nmergeCells(workbook, sheet = \"summary\", reference)\nmergedCellsIndex <- seq(2, length(stain.names)+1, 1)\n\n#Write to the worksheet\nwriteWorksheet(workbook, \"Average Cells/mm Per Stain for (3+, 2+, 1+), (3+, 2+), and (3+)\", sheet = \"summary\", 3, 3, header = FALSE)\n#Set CellStyle to average.header\nsetCellStyle(workbook, sheet = \"summary\", row = 3, col = mergedCellsIndex+1, cellstyle = average.header)\n\n#Create the columns for the data to go in\nsummary.col.names <- c();\n\nfor(i in 1:length(stain.names)) {\n  stain.name <- paste0(\"Stain \", as.character(stain.names[i]));\n  #put in the initial names\n  if(i==1){\n    summary.col.names <- c(\"Mouse ID\", stain.name);\n  } else {\n    # Very hack-y method at the moment\n    summary.col.names <- c(summary.col.names, \"NA\", \"NA\", stain.name);\n  }\n}\n\n# Make stain names span 3 columns so that the different averages can be included below\n#  Create CellStyles to use later\nstain.header <- createCellStyle(workbook, name = \"StainHeader\")\n\n#Create the columns for the data to go in\nsummary.stain.names <- c();\n#Index to track where to put the next header\nindex <- 0\n\nfor(i in 1:length(stain.names)) {\n  stain.name <- paste0(\"Stain \", as.character(stain.names[i]));\n  #    Create header for above the stain numbers\n  #have reference to get correct number of columns\n  # TODO add support for if the stains go into the double letter range\n  if (i == 1) {\n    mergeCells(workbook, sheet = \"summary\", \"C4:E4\")\n  } else {\n  reference <- paste0(LETTERS[index+3],\"4:\", LETTERS[index+5], \"4\")\n  mergeCells(workbook, sheet = \"summary\", reference)\n}\n  #Write to the worksheet\n  writeWorksheet(workbook, stain.name, sheet = \"summary\", 4, 2, header = FALSE)\n  #up index by three since each stain takes up three columns\n  index <- index + 3\n}\n\n#Apply column names to the summary output\ncolnames(mouse.summary.output) <- summary.col.names\n\nwriteWorksheet(workbook, mouse.summary.output, sheet = \"summary\", startRow = 4, startCol = 2)\n\n# Add groups to summary sheet, adding it to mouse.summary.output changed all numerics to characters\ngroup.names <- c();\nmice.ids <- mouse.summary.output$`Mouse ID`\nfor(i in 1:length(mice.ids)) {\n  current.data <- subset(output, output[,3]==mice.ids[i])\n  current.data.row <- head(current.data, 1)\n  # Taken from: https://stackoverflow.com/questions/24447877/invalid-factor-level-na-generated-when-pasting-in-a-dataframe-in-r\n  current.data.row[,c(1)] <- sapply(current.data.row[,c(1)],as.character) \n  #Adds name to the vector\n  group.names <- c(group.names, current.data.row$Group)\n}\n#Converts to data.frame starting with data.frame resulted in NA errors\ngroup.names <- as.data.frame(group.names)\n\ncolnames(group.names) <- \"Group\"\n\nwriteWorksheet(workbook, group.names, sheet = \"summary\", startRow = 4)\n#Save to workbook after creating the summary\nsaveWorkbook(workbook)",
    "created" : 1438796786554.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1749561240",
    "id" : "B9BE94D6",
    "lastKnownWriteTime" : 1438796799,
    "path" : "C:/Development/SU2C_pancreatic_cancer/aperio_consolidator.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}