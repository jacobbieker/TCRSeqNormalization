{
    "contents" : "# Designed and developed by Jacob Bieker (jacob@bieker.tech)\n\n# Script reads in a csv file containing spiked read counts from TCR sequencing, and calculates the \n# what number is needed to change the counts of each spiked read to the mean. \n# Using the spiked reads, it finds the corresponding VJ region in a MiTCR-formatted CSV file\n# It then normalizes the count for each region in the MiTCR file using the multiples from the spikes\n#\n# Assumptions:\n#   1.  A CSV file, named \"<MiTCR File>xout.csv\" per MiTCR file of the format ID,spike,count\n#   2.  A MiTCR csv file per CSV file\n#   3.  A CSV file detailing the barcode-to-VJ-region \n#   4.  Spiked reads are supposed to be present in the exact same frequency\n\n#############################################################################\n#\n#             Setup\n#\n#############################################################################\n\n#############################################################################\n#\n#             Spiked Read CSV code\n#\n#############################################################################\n\n#   identify all .csv files that should be the spiked read counts in the directory \nspiked_files <- list.files(getwd(), pattern = \"*_*.txt\");\nprint(spiked_files)\n#  Get all the MiTCR files with spiked reads removed in the directory\nMiTCR_files <- list.files(getwd(), pattern = \"*_*rm.csv\");\nprint(MiTCR_files)\n\n# Go through each file and read in the CSV spiked_reads, skpping the first line which gives no information\n# All operations on the spiked_reads will happen inside the for loop, so that it goes through each file\n# and each MiTCR file once\nfor(spike_file in spiked_files) {\n  # Get the corresponding MiTCR file to go with the spiked file\n  spiked_file_name <- strsplit(spike_file, \".txt\");\n  corresponding_MiTCR <- match(paste(spiked_file_name,\"rm.csv\",sep=\"\"), MiTCR_files)\n  \n  # Reads in the spiked_read counts\n  spiked_reads <- read.csv(spike_file, header = FALSE, skip = 1, stringsAsFactors = FALSE);\n  #Get the mean from the last column, which is the read count\n  spiked_mean <- mean(spiked_reads[[3]])\n  \n  # Test vector holding all the multiples needed to hit the mean\n  multiples_needed <- spiked_mean/spiked_reads$V3 \n  \n  #Puts the spiked_reads in the spiked_reads.frame for later use\n  spiked_reads$multiples <- multiples_needed\n  \n  # Opens the matching MiTCR file, if such file exists\n  if(!is.na(MiTCR_files[corresponding_MiTCR])){\n  MiTCR_file_data <- read.csv(MiTCR_files[corresponding_MiTCR], stringsAsFactors = FALSE)\n  # Get rid of the TRB that is before every V and J segment name, so it can be matched later\n  MiTCR_file_data$V.segments <- gsub(\"^.*?V\", \"V\", MiTCR_file_data$V.segments)\n  MiTCR_file_data$J.segments <- gsub(\"^.*?J\", \"J\", MiTCR_file_data$J.segments)\n  \n  # Go through every row in MiTCR data\n    for(row in MiTCR_file_data) {\n      # Subset to a smaller data.frame only those spiked reads that have the same V and J values\n      spiked_multiple_row <- subset(spiked_reads, spiked_reads$V == row$V.segments & spiked_reads$J == row$J.segments)\n      row$Seq..Count <- spiked_multiple_row$multiples * row$Seq..Count\n    }\n  \n  # After going through an applying all the multiples, write to CSV file, appending to \n  # original file name\n  write.csv(MiTCR_file_data, file = str(MiTCR_files[corresponding_MiTCR]) + \".normalized\")\n  \n  }\n}\n",
    "created" : 1438794483095.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3109764767",
    "id" : "FC19BFA9",
    "lastKnownWriteTime" : 1439242582,
    "path" : "C:/Development/TCRSeqNormalization/tcr_seq_normalizer.R",
    "project_path" : "tcr_seq_normalizer.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}