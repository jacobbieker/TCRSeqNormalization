{
    "contents" : "# Designed and developed by Jacob Bieker (jacob@bieker.tech)\n\n# Script reads in a csv file containing spiked read counts from TCR sequencing, and calculates the \n# what number is needed to change the counts of each spiked read to the mean. \n# It then takes the multiples for the largest read and smallest read and uses that as the scale\n# to normalize the FASTQ files with all the reads. \n# Prior to the full FASTQ file being normalized, the spiked reads are removed.\n#\n# Assumptions:\n#   1.  A CSV file, named \"<FASTQ File>xout.csv\" per FASTQ file of the format ID,spike,count\n#   2.  A FASTQ file per CSV file\n#   3.  Spiked reads are supposed to be present in the exact same frequency\n\n#############################################################################\n#\n#             Setup\n#\n#############################################################################\n\n#############################################################################\n#\n#             Spiked Read CSV code\n#\n#############################################################################\n\n#   identify all .csv files that should be the spiked read counts in the directory \nfiles <- list.files(getwd(), pattern = \"*xout.csv\");\n\n# Go through each file and read in the CSV data, skpping the first line which gives no information\n# All operations on the data will happen inside the for loop, so that it goes through each file\n# and each FASTQ file once\nfor(spike_file in files) {\n  data <- read.csv(spike_file, header = FALSE, skip = 1);\n  #Get the mean from the last column, which is the read count\n  spiked_mean <- mean(data[[3]])\n  # The get max\n  spiked_max <- max(data[[3]])\n  # Get the min\n  spiked_min <- min(data[[3]])\n  # Get the smallest multiple that the FASTQ file will be normalized by\n  smallest_multiple <- (spiked_mean/spiked_max)\n  # Get the largest multiple that the FASTQ file will be normalized by\n  largest_multiple <- (spiked_mean/spiked_min)\n  # Getting the range for possible use at the scale\n  multiple_range <- largest_multiple - smallest_multiple\n  #Range of the spiked reads\n  spiked_range <- spiked_max - spiked_min\n  vectorized_spikes <- data$V3\n  vectorized_large <- max(vectorized_spikes)\n  vectorized_small <- min(vectorized_spikes)\n  vectorized_range <- vectorized_large - vectorized_small\n  # Get change per number in range for multiple\n  delta_multiple <- multiple_range/spiked_range\n  # Convert to change per percentage\n  percentage_per_number_in_range <- 100.00/spiked_range\n  # Divide delta by percentage to get the change per 1 percent of the range\n  delta_per_one_percent <- delta_multiple/percentage_per_number_in_range\n}\n\n",
    "created" : 1438794483095.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3560773273",
    "id" : "FC19BFA9",
    "lastKnownWriteTime" : 1438804110,
    "path" : "C:/Development/TCRSeqNormalization/tcr_seq_normalizer.R",
    "project_path" : "tcr_seq_normalizer.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}